################
## 타입 종류
# - `init` : 처음 빌드
# - `feat` : 새로운 기능 추가
# - `fix` : 버그, 오류 해결
# - `modify` : 코드 수정 (기능의 변화가 있을 때)
# - `docs` : README나 WIKI 등의 문서 수정
# - `remove` : 폴더 또는 파일 삭제, 쓸모없는 코드 삭제
# - `rename` : 파일 이름 변경 또는 파일 이동시
# - `refactor` : 기능 추가나 버그 수정이 없는 코드 변경 ( 코드 구조 변경 등의 리팩토링 )
# - `style` : 코드 formatting, 세미콜론 누락, 코드 자체의 변경이 없는 경우
# - `design` : CSS 등 사용자 UI 디자인 변경
# - `test` : 테스트 코드, 리팩토링 테스트 코드 추가
# - `chore` : src 또는 test 파일을 수정하지 않는 기타 변경 사항 ( 빌드/패키지 매니저 설정 변경 등 )
# - `merge` : merge 하는 경우
# - `!BREAKING CHANGE` : 커다란 API 변경의 경우
# - `!HOTFIX` : 급하게 치명적인 버그를 고쳐야 하는 경우
################

# "[타입] <날짜> <git ID> 제목 #이슈번호" 의 형식으로 제목 작성
# 제목은 20자 이내 / 변경사항이 "무엇"인지 명확히 작성 / 끝에 마침표 금지

#git commit -m "커밋 태그: 커밋 내용 (#이슈번호)"
# 예) [Feat] 01/21 hyun9758 초기 프로젝트 생성

################

# 본문(구체적인 내용) 작성
# 여러 줄의 메시지를 작성할 땐 "-"로 구분 (한 줄은 72자 이내)
# 예) - setCount 함수를 통한 count 상태 업데이트 가능한 버튼
#     - store/counter.js의 zustand 상태를 사용함.
# 아래 형식에 내용을 채워주세요.
#

[타입] 날짜 ID 제목 #이슈번호
- 본문